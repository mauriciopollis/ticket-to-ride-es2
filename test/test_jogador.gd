extends GutTest

var Jogador = preload("res://Scripts/Jogador.gd")
var CartaTrem = preload("res://Scripts/CartaTrem.gd")
var BilheteDestino = preload("res://Scripts/BilheteDestino.gd")
var Cidade = preload("res://Scripts/Cidade.gd")
var Rota = preload("res://Scripts/Rota.gd")
var Utils = preload("res://Scripts/utils.gd")

func test_inicializacao():
	var jogador = Jogador.new("jogadorTeste", Color.RED)
	assert(jogador.nome == "jogadorTeste")
	assert(jogador.cor == Color.RED)
	assert(jogador.pontos == 0)
	assert(jogador.vagoesDisponiveis == 45)
	assert(jogador.rotas.size() == 0)
	assert(jogador.cartasTremNaMao.size() == 0)
	assert(jogador.bilhetesDestinoNaMao.size() == 0)
	assert(jogador.bilhetesDestinoCompletados.size() == 0)

func test_inserir_e_remover_cartas():
	var jogador = Jogador.new("jogadorTeste", Color.RED)
	var carta1 = CartaTrem.new(Color.RED)
	var carta2 = CartaTrem.new(Color.BLUE)
	jogador.inserirCartaTrem(carta1)
	jogador.inserirCartaTrem(carta2)
	assert(jogador.cartasTremNaMao.size() == 2)
	jogador.removerCartaTrem(carta1)
	assert(jogador.cartasTremNaMao.size() == 1)
	assert(jogador.cartasTremNaMao[0].cor == carta2.cor)

func test_inserir_e_completar_bilhetes():
	var jogador = Jogador.new("jogadorTeste", Color.RED)
	var cidade1 = Cidade.new("A")
	var cidade2 = Cidade.new("B")
	var bilhete = BilheteDestino.new(cidade1, cidade2, 5)
	jogador.inserirBilheteDestinoNaMao(bilhete)
	assert(jogador.bilhetesDestinoNaMao.size() == 1)
	jogador.completarBilheteDestino(bilhete)
	assert(jogador.bilhetesDestinoNaMao.size() == 0)
	assert(jogador.bilhetesDestinoCompletados.size() == 1)

func test_buscar_caminho():
	var jogador = Jogador.new("jogadorTeste", Color.RED)
	var cidade1 = Cidade.new("A")
	var cidade2 = Cidade.new("B")
	var cidade3 = Cidade.new("C")
	var rota1 = Rota.new("Rota 1", cidade1, cidade2, "RED", 3)
	var rota2 = Rota.new("Rota 2", cidade2, cidade3, "BLUE", 2)
	jogador.inserirRota(rota1)
	jogador.inserirRota(rota2)
	assert(jogador.buscarCaminho(cidade1, cidade3) == true)
	assert(jogador.buscarCaminho(cidade1, Cidade.new("X")) == false)

func test_resetar_mao():
	var jogador = Jogador.new("jogadorTeste", Color.RED)
	var carta = CartaTrem.new(Color.RED)
	var cidade1 = Cidade.new("A")
	var cidade2 = Cidade.new("B")
	var bilhete = BilheteDestino.new(cidade1, cidade2, 5)
	jogador.inserirCartaTrem(carta)
	jogador.inserirBilheteDestinoNaMao(bilhete)
	jogador.completarBilheteDestino(bilhete)
	jogador.resetarMao()
	assert(jogador.vagoesDisponiveis == 45)
	assert(jogador.cartasTremNaMao.is_empty())
	assert(jogador.bilhetesDestinoNaMao.is_empty())
	assert(jogador.bilhetesDestinoCompletados.is_empty())

func test_validar_bilhete_destino_na_mao():
	var jogador = Jogador.new("jogadorTeste", Color.RED)
	var cidade1 = Cidade.new("A")
	var cidade2 = Cidade.new("B")
	var bilhete = BilheteDestino.new(cidade1, cidade2, 10)
	jogador.inserirBilheteDestinoNaMao(bilhete)
	var rota = Rota.new("Rota", cidade1, cidade2, "RED", 3)
	jogador.inserirRota(rota)
	jogador.validarBilheteDestinoNaMao(false)
	assert(jogador.pontos == 10)
	assert(jogador.bilhetesDestinoNaMao.is_empty())
	assert(jogador.bilhetesDestinoCompletados.size() == 1)

func test_get_maior_caminho():
	var jogador = Jogador.new("jogadorTeste", Color.RED)
	var cidade1 = Cidade.new("A")
	var cidade2 = Cidade.new("B")
	var cidade3 = Cidade.new("C")
	var rota1 = Rota.new("Rota 1", cidade1, cidade2, "RED", 3)
	var rota2 = Rota.new("Rota 2", cidade2, cidade3, "BLUE", 2)
	jogador.inserirRota(rota1)
	jogador.inserirRota(rota2)
	var maior_caminho = jogador.getMaiorCaminho()
	assert(maior_caminho.size() == 2)
	assert(maior_caminho.has(rota1))
	assert(maior_caminho.has(rota2))
